import React, { useRef, useState } from 'react';
import { Dimensions, ScrollView, StyleSheet, Text, View } from 'react-native';

const { width: screenWidth } = Dimensions.get('window');
const cardWidth = screenWidth * 0.7;
const cardSpacing = 20;

const ChallengeCarousel = () => {
  const [activeIndex, setActiveIndex] = useState(2); // Ï¥àÍ∏∞Í∞íÏùÑ 2Î°ú ÏÑ§Ï†ï (Ï≤´ Î≤àÏß∏ ÏÑ∏Ìä∏Ïùò Ï§ëÏïô)
  const scrollViewRef = useRef(null);
  
  const challenges = [
    {
      id: 1,
      title: 'ÏßÄÎÇú Ï±åÎ¶∞ÏßÄ',
      icon: 'ü•§',
      description: 'Ïò§ÎäòÏùò Ï∂îÏ≤ú ÎØ∏ÏÖò: "Ïò§Îäò 2km Í±∑Í∏∞"',
      type: 'previous'
    },
    {
      id: 2,
      title: 'Í±∑Í∏∞ Ï±åÎ¶∞ÏßÄ',
      icon: 'üö∂',
      description: 'ÏùºÏÉÅ ÏÜç Í±∑Í∏∞Î°ú Í±¥Í∞ïÌïú ÏäµÍ¥Ä ÎßåÎì§Í∏∞',
      type: 'walking'
    },
    {
      id: 3,
      title: 'ÌÖÄÎ∏îÎü¨ Ï±åÎ¶∞ÏßÄ',
      icon: '‚òï',
      description: 'ÏùºÌöåÏö© Ïªµ ÎåÄÏã† ÌÖÄÎ∏îÎü¨ ÏÇ¨Ïö©ÌïòÍ∏∞',
      type: 'tumbler'
    },
    {
      id: 4,
      title: 'Î∂ÑÎ¶¨ÏàòÍ±∞ Ï±åÎ¶∞ÏßÄ',
      icon: '‚ôªÔ∏è',
      description: 'Ïò¨Î∞îÎ•∏ Î∂ÑÎ¶¨ÏàòÍ±∞Î°ú ÌôòÍ≤Ω Î≥¥Ìò∏ÌïòÍ∏∞',
      type: 'recycling'
    },
    {
      id: 5,
      title: 'ÎåÄÏ§ëÍµêÌÜµ Ï±åÎ¶∞ÏßÄ',
      icon: 'üöå',
      description: 'ÏûêÎèôÏ∞® ÎåÄÏã† ÎåÄÏ§ëÍµêÌÜµ Ïù¥Ïö©ÌïòÍ∏∞',
      type: 'transport'
    }
  ];

  // Î¨¥Ìïú Î¶¨Ïä§Ìä∏Î•º ÏúÑÌïú Îç∞Ïù¥ÌÑ∞ Î≥µÏ†ú
  const infiniteChallenges = [...challenges, ...challenges, ...challenges];

  // Ïä§ÌÅ¨Î°§ Ï§ëÏïôÏóê ÏûàÎäî Ïπ¥Îìú Ïù∏Îç±Ïä§ Í≥ÑÏÇ∞ (Ïù¥Ï†Ñ Ïù∏Îç±Ïä§Î°ú)
  const handleScroll = (event) => {
    const scrollPosition = event.nativeEvent.contentOffset.x;
    const cardWidthWithSpacing = cardWidth + cardSpacing;
    const centerPosition = scrollPosition + (screenWidth / 2);
    const index = Math.floor(centerPosition / cardWidthWithSpacing); // Math.round ‚Üí Math.floorÎ°ú Î≥ÄÍ≤Ω
    setActiveIndex(index);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.sectionTitle}>Ïò§ÎäòÏùò Ï±åÎ¶∞ÏßÄ ÏÑ†ÌÉù</Text>
      <ScrollView
        ref={scrollViewRef}
        horizontal
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.scrollContainer}
        snapToInterval={cardWidth + cardSpacing}
        decelerationRate={0.8}
        pagingEnabled={false}
        onScroll={handleScroll}
        scrollEventThrottle={16}
        onMomentumScrollEnd={(event) => {
          // Ïä§ÌÅ¨Î°§Ïù¥ ÎÅùÏóê ÎèÑÎã¨ÌñàÏùÑ Îïå Ï≤òÏùåÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
          const contentOffset = event.nativeEvent.contentOffset.x;
          const maxOffset = event.nativeEvent.contentSize.width - event.nativeEvent.layoutMeasurement.width;
          
          if (contentOffset >= maxOffset - 10) {
            // ÎÅùÏóê ÎèÑÎã¨ÌñàÏùÑ Îïå Ï≤òÏùåÏúºÎ°ú Ïä§ÌÅ¨Î°§
            event.target.scrollTo({ x: 0, animated: false });
          }
        }}
      >
        {infiniteChallenges.map((challenge, index) => (
          <View
            key={`${challenge.id}-${index}`}
            style={[
              styles.card,
              // ÌòÑÏû¨ ÌôîÎ©¥ Ï§ëÏïôÏóê Î≥¥Ïù¥Îäî Ïπ¥ÎìúÎßå Í∞ïÏ°∞
              index === activeIndex ? styles.activeCard : styles.inactiveCard,
            ]}
          >
            <Text style={[
              styles.cardTitle,
              index === activeIndex ? styles.activeText : styles.inactiveText
            ]}>
              {challenge.title}
            </Text>
            <View style={styles.iconContainer}>
              <Text style={styles.icon}>{challenge.icon}</Text>
            </View>
            <Text style={[
              styles.cardDescription,
              index === activeIndex ? styles.activeText : styles.inactiveText
            ]}>
              {challenge.description}
            </Text>
          </View>
        ))}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    marginBottom: 30,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#2D2D2D',
    marginBottom: 20,
    marginLeft: 20,
    fontFamily: 'Pretendard Variable',
  },
  scrollContainer: {
    paddingHorizontal: (screenWidth - cardWidth) / 2 - cardSpacing * 1.5, // Ïπ¥Îìú Í∞ÑÍ≤© Í≥†Î†§ÌïòÏó¨ Ï†ïÌôïÌïú Ï§ëÏïô Ï†ïÎ†¨
  },
  card: {
    width: cardWidth,
    height: 148,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginHorizontal: cardSpacing / 2,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    justifyContent: 'space-between',
  },
  activeCard: {
    shadowOpacity: 0.2,
    elevation: 5,
    borderWidth: 2,
    borderColor: '#006256',
  },
  inactiveCard: {
    opacity: 0.5,
  },
  cardTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
    fontFamily: 'Pretendard Variable',
  },
  activeText: {
    color: '#2D2D2D',
  },
  inactiveText: {
    color: '#999999',
  },
  iconContainer: {
    alignItems: 'center',
    marginVertical: 8,
  },
  icon: {
    fontSize: 32,
  },
  cardDescription: {
    fontSize: 12,
    textAlign: 'center',
    lineHeight: 16,
    fontFamily: 'Pretendard Variable',
  },
});

export default ChallengeCarousel;
